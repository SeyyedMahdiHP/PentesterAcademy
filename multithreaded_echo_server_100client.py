# this is an echo server which can handle 100 clients concurrently
import socket, threading

# create a socket object:
echo_server_tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# binding to the address(multi homed:0.0.0.0)
echo_server_tcp_socket.bind(("0.0.0.0", 1010))
# listen to the port for incoming connection
echo_server_tcp_socket.listen(100)  # just 100 client:number of concurrent clients


# handle "rcv from" and "send to" data in the handle_client function:
def handle_client(client_socket):
    data = client_socket.recv(4096)
    socket_to_string = str(client_socket)
    print("present client:" + socket_to_string)
    print("data:%s received from [%s:%s]\r\n" % (data, socket_to_string.split(',')[6], socket_to_string.split(',')[7]))
    client_socket.send(data)  # a bytes-like object is required, not 'str' for example: client_socket.send(b'hello')
    return 0


# accept incoming connections and send them to the handle_client function:
while True:
    incoming_client_socket, (incoming_client_ip, incoming_client_port) = echo_server_tcp_socket.accept()
    print("incoming socket:[%s] with address:[%s:%s]\r\n" % (
        incoming_client_socket, incoming_client_ip, incoming_client_port))

    # using thread to handle mulitple clients
    thread__handle_client = threading.Thread(target=handle_client, args=(incoming_client_socket,))
    thread__handle_client.start()






# output:
### incoming socket:[<socket.socket fd=288, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('127.0.0.1', 1010), raddr=('127.0.0.1', 5745)>] with address:[127.0.0.1:5745]
## present client:<socket.socket fd=288, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('127.0.0.1', 1010), raddr=('127.0.0.1', 5745)>
# data:b'hello' received from [ raddr=('127.0.0.1': 5745)>]

# thread tuts: https://pymotw.com/2/threading/
