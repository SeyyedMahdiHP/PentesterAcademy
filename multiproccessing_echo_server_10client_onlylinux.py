# this is an echo server which can handle 10 clients concurrently
# only work on linux
import socket
import multiprocessing

# create a socket object:
echo_server_tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# binding to the address(multi homed:0.0.0.0)
echo_server_tcp_socket.bind(("0.0.0.0", 1010))
# listen to the port for incoming connection
echo_server_tcp_socket.listen(10)  # just 10 client:number of concurrent clients


# handle "rcv from" and "send to" data in the handle_client function:
def handle_client(client_socket, address):
    while True:
        data = client_socket.recv(4096)
        print("data:%s received from [%s:%s]\r\n" % (data, address[0], address[1]))
        client_socket.send(
            data)  # a bytes-like object is required, not 'str' for example: client_socket.send(b'hello')
    client_socket.close()
    return 0


# accept incoming connections and send them to the handle_client function:
while True:
    incoming_client_socket, incoming_address = echo_server_tcp_socket.accept()
    print("incoming socket:[%s] with address:[%s:%s]\r\n" % (
        incoming_client_socket, incoming_address[0], incoming_address[1]))
    # using thread to handle multiple clients
    process__handle_client = multiprocessing.Process(target=handle_client,
                                                     args=(incoming_client_socket, incoming_address))
    process__handle_client.start()






# output:
### incoming socket:[<socket.socket fd=288, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('127.0.0.1', 1010), raddr=('127.0.0.1', 5745)>] with address:[127.0.0.1:5745]
## present client:<socket.socket fd=288, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('127.0.0.1', 1010), raddr=('127.0.0.1', 5745)>
# data:b'hello' received from [ raddr=('127.0.0.1': 5745)>]

# thread tuts: https://pymotw.com/2/threading/
